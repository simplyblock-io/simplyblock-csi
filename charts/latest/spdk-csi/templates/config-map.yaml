# SPDX-License-Identifier: Apache-2.0
# Copyright (c) Arm Limited and Contributors
# Copyright (c) Intel Corporation

{{- if .Values.externallyManagedConfigmap }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spdkcsi-cm
data:
  # uuid: the simplyblock cluster UUID
  # ip: the management IP of the simplyblock cluster
  # targetAddr: target service IP
  config.json: |-
{{ toJson .Values.csiConfig | indent 4 -}}
{{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: add-caching-node-script-cm
data:
  add_cn_script.py: |
    from kubernetes import client, config
    import json, os, requests
    from time import sleep

    config.load_incluster_config()

    secret = json.loads(os.getenv("SPDKCSI_SECRET"))
    cluster_secret = secret['simplybk']['secret']

    cluster_config = json.loads(os.getenv("CLUSTER_CONFIG"))
    namespace = os.getenv("NAMESPACE", "default")
    cluster_uuid = cluster_config['simplybk']['uuid']
    cluster_ip = cluster_config['simplybk']['ip']

    label_selector = "app=caching-node"
    api_instance = client.CoreV1Api()
    pods = api_instance.list_pod_for_all_namespaces(label_selector=label_selector)

    print(f"found {len(pods.items)} pods with label: app=caching-node")
    for pod in pods.items:
        node_ip = pod.status.pod_ip
        print(f"adding caching node: {node_ip} in namespace: {namespace}")

        url = f"{cluster_ip}/cachingnode/"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"{cluster_uuid} {cluster_secret}"
        }
        data = json.dumps({
            "cluster_id": cluster_uuid,
            "node_ip": f"{node_ip}:5000",
            "iface_name": "{{ .Values.cachingnode.ifname }}",
            "cpu_mask": "{{ .Values.cachingnode.cpuMask }}",
            "namespace": namespace
        })

        requests.post(url, headers=headers, data=data)
        url = f"{cluster_ip}/cachingnode/"

        for i in range(12):
          response = requests.get(url, headers=headers)
          if response.status_code != 200:
            print(f"failed to list caching nodes: response: {response.text}. response code: {response.status_code}")
            sleep(10)
          else:
            for result in response.json()['results']:
              if result['mgmt_ip'] == node_ip and result['status'] == "online":
                print(f"successfully added caching node: {node_ip}")
                break
            sleep(10)

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: caching-node-restart-script-cm
data:
  restart_script.py: |
    import json, os, requests

    secret = json.loads(os.getenv("SPDKCSI_SECRET"))
    cluster_secret = secret['simplybk']['secret']

    cluster_config = json.loads(os.getenv("CLUSTER_CONFIG"))
    cluster_uuid = cluster_config['simplybk']['uuid']
    cluster_ip = cluster_config['simplybk']['ip']
    hostname = os.getenv('HOSTNAME')
    hostname = hostname.split(".")[0]

    url = f'{cluster_ip}/cachingnode/recreate/{hostname}'
    headers = {
        'Authorization': f'{cluster_uuid} {cluster_secret}'
    }

    print(f"making GET request to: {url}")
    response = requests.get(url, headers=headers)

    print("Response Text:", response.text)
    print("Response Code:", response.status_code)

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mgmt-api-script-cm
data:
  action.py: |
    import json
    import os
    import requests
    from time import sleep

    def get_node_statuses(cluster_ip, cluster_uuid, cluster_secret):
        url = f"{cluster_ip}/storagenode"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"{cluster_uuid} {cluster_secret}"
        }

        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                results = response.json().get('results', [])
                return results
            else:
                print(f"Failed to get node statuses, Status Code: {response.status_code}")
        except Exception as e:
            print(f"Error occurred while getting node statuses: {e}")
        return []

    def activate_cluster_if_needed(cluster_ip, cluster_uuid, cluster_secret, distr_ndcs, distr_npcs):
        retries = 60
        total_value = distr_ndcs + distr_npcs + 1
        while retries > 0:
            node_statuses = get_node_statuses(cluster_ip, cluster_uuid, cluster_secret)
            online_nodes = [node for node in node_statuses if node.get('status') == 'online']

            if len(online_nodes) >= total_value:
                print("Proceeding with cluster activation.")
                url = f"{cluster_ip}/cluster/activate/{cluster_uuid}"
                headers = {
                    "Content-Type": "application/json",
                    "Authorization": f"{cluster_uuid} {cluster_secret}"
                }
                try:
                    response = requests.put(url, headers=headers)
                    if response.status_code == 200:
                        print("Successfully activated the cluster.")
                        return
                    else:
                        print(f"Failed to activate the cluster, Status Code: {response.status_code}")
                except Exception as e:
                    print(f"Error occurred while activating the cluster: {e}")
                return

            retries -= 1
            print(f"Not enough 'online' nodes. Retrying in 5 seconds... Remaining retries: {retries}")
            sleep(5)

        print(f"Cluster not activated: Number of 'online' storage nodes is less than {total_value} after maximum retries.")

    # Load environment variables
    action_type = os.getenv("ACTION_TYPE")
    uuid = os.getenv("SNODE_UUID", "")
    distr_ndcs = int(os.getenv("DISTR_NDCS", 1)) if os.getenv("DISTR_NDCS", "").isdigit() else 1
    distr_npcs = int(os.getenv("DISTR_NPCS", 1)) if os.getenv("DISTR_NPCS", "").isdigit() else 1

    secret = json.loads(os.getenv("SPDKCSI_SECRET"))
    cluster_secret = secret['simplybk']['secret']

    cluster_config = json.loads(os.getenv("CLUSTER_CONFIG"))
    namespace = os.getenv("NAMESPACE", "default")
    cluster_uuid = cluster_config['simplybk']['uuid']
    cluster_ip = cluster_config['simplybk']['ip']
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"{cluster_uuid} {cluster_secret}"
    }

    # Check the action type and perform the appropriate action
    if action_type == "cl_activate":
        # Check if we should activate the cluster
        activate_cluster_if_needed(cluster_ip, cluster_uuid, cluster_secret, distr_ndcs, distr_npcs)
    elif action_type in ["sn_restart", "sn_shutdown", "sn_remove"] and uuid:
        if action_type == "sn_restart":
            url = f"{cluster_ip}/storagenode/restart/{uuid}"
        elif action_type == "sn_shutdown":
            url = f"{cluster_ip}/storagenode/shutdown/{uuid}?force=True"
        elif action_type == "sn_remove":
            url = f"{cluster_ip}/storagenode/remove/{uuid}"
        elif action_type == "make_sec_primary":
            url = f"{cluster_ip}/storagenode/make-sec-new-primary/{uuid}"
            
        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                print(f"Successfully executed action: {action_type} for UUID: {uuid}")
            else:
                print(f"Failed to execute action: {action_type} for UUID: {uuid}, Status Code: {response.status_code}")
        except Exception as e:
            print(f"Error occurred: {e}")
    elif action_type == "sn_idle":
        print("No action needed for 'sn_idle'.")
    else:
        print(f"Invalid action type or UUID is missing for action: {action_type}")
        exit(1)
